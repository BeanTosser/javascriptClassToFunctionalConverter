{"ast":null,"code":"/*\r\n * This is a generic function designed to:\r\n *   1. Remove the outer container of a code block\r\n *      Ex: \"this.state = {\" as well as the closing \"}\".\r\n *   2. Apply some standard modification to each line within the block\r\n *      Ex: \"var1: val1\" > \"setVar1(val1)\"\r\n */\nexport default function replaceStateModifier(str, subPatternReplacementFunction) {\n  // First, remove the outer assignment or setState() call and closing bracket\n  console.log(\"str before replace: \" + str);\n  var regexPattern = /(?:(?:.*|\\s*){\\s)([\\s\\S]*)(?:[^\\S\\n\\r]*)(?:s*}[^\\S\\n\\r]*\\)?;?\\s*)/;\n  str = str.replace(regexPattern, \"$1\");\n  console.log(\"str: \" + str);\n  regexPattern = /([a-z])(\\w*): ([^\\s,]*),?\\n?/g; // Next, apply the subPatternReplacementFunction to the string\n\n  str = str.replace(regexPattern, subPatternReplacementFunction);\n  return str;\n}","map":{"version":3,"sources":["/home/michael/git/javascriptClassToFunctionalConverter/src/Tools/replaceStateModifier.js"],"names":["replaceStateModifier","str","subPatternReplacementFunction","console","log","regexPattern","replace"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,eAAe,SAASA,oBAAT,CACbC,GADa,EAEbC,6BAFa,EAGb;AACA;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,yBAAyBH,GAArC;AACA,MAAII,YAAY,GAAG,mEAAnB;AACAJ,EAAAA,GAAG,GAAGA,GAAG,CAACK,OAAJ,CAAYD,YAAZ,EAA0B,IAA1B,CAAN;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAUH,GAAtB;AACAI,EAAAA,YAAY,GAAG,+BAAf,CANA,CAOA;;AACAJ,EAAAA,GAAG,GAAGA,GAAG,CAACK,OAAJ,CAAYD,YAAZ,EAA0BH,6BAA1B,CAAN;AAEA,SAAOD,GAAP;AACD","sourcesContent":["/*\r\n * This is a generic function designed to:\r\n *   1. Remove the outer container of a code block\r\n *      Ex: \"this.state = {\" as well as the closing \"}\".\r\n *   2. Apply some standard modification to each line within the block\r\n *      Ex: \"var1: val1\" > \"setVar1(val1)\"\r\n */\r\n\r\nexport default function replaceStateModifier(\r\n  str,\r\n  subPatternReplacementFunction\r\n) {\r\n  // First, remove the outer assignment or setState() call and closing bracket\r\n  console.log(\"str before replace: \" + str);\r\n  let regexPattern = /(?:(?:.*|\\s*){\\s)([\\s\\S]*)(?:[^\\S\\n\\r]*)(?:s*}[^\\S\\n\\r]*\\)?;?\\s*)/;\r\n  str = str.replace(regexPattern, \"$1\");\r\n  console.log(\"str: \" + str);\r\n  regexPattern = /([a-z])(\\w*): ([^\\s,]*),?\\n?/g;\r\n  // Next, apply the subPatternReplacementFunction to the string\r\n  str = str.replace(regexPattern, subPatternReplacementFunction);\r\n\r\n  return str;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}