{"ast":null,"code":"import replaceStateModifier from \"./replaceStateModifier.js\";\nexport default function (componentString) {\n  // REGEX PATTERNS\n  var regexPatterns = {\n    classDeclarationRegex: /class ((\\w*|\\d*)+) extends React.Component *{ *\\n/gim,\n    // blah? remove outer constructor definition block and fix contents indentation accordingly\n    constructorRegex: /( *constructor\\(props\\) *{ *\\n)(?: *super\\(props\\);? *\\n)(((?: {2}).*\\n)*)/gim,\n    modifyStateRegex: /(?: *((this.state ?= ?{)|(this.setState\\({)) *\\n)((( *)([a-z]\\w*): (\\w*),? *\\s*)*)}\\)?;?\\n/g,\n    setStateRegex: /(?: *this.setState ?\\(\\s*{ *\\n)(( *)([a-z]\\w*): (\\w*),? *\\s*)*};?/,\n    setStateVarRegex: /([a-z])(\\w*): ([^\\s,]*),?/g,\n    useStateSetter: /set([a-z])\\w*/g\n  };\n  var replacements = {\n    classDeclarationReplacement: \"function $1(props) {\\n\",\n    constructorReplacement: \"$2\",\n    initializeStateReplacement: \"$1\",\n    initializeStateVariableReplacement: \"const [$1, set$1] = useState($2);\"\n  };\n\n  var replaceStateInitialization = function replaceStateInitialization(p1, p2, p3, p4) {\n    return \"const [\" + p2 + p3 + \", set\" + p2.toUpperCase() + p3 + \"] = useState(\" + p4 + \")\\n\";\n  }; //Replace class definition with function definition\n\n\n  componentString = componentString.replace(regexPatterns.classDeclarationRegex, replacements.classDeclarationReplacement); // Remove constructor declaration and its closing \"}\"\n\n  componentString = componentString.replace(regexPatterns.constructorRegex, replacements.constructorReplacement); // Store all instances of state modifying blocks in \"match\"\n\n  var matches = componentString.match(regexPatterns.modifyStateRegex); // Obtain the substring of each state-modifying block and pass it\n  // To the replaceStateModifier function\n\n  var lastMatchEndIndex = 0;\n  var componentStringSections = [];\n\n  for (var i = 0; i < matches.length; i++) {\n    //console.log(\"Adding componentStringSection: \" + componentString.substring(lastMatchEndIndex, matches[i].index));\n    componentStringSections.push(componentString.substring(lastMatchEndIndex, matches[i].index));\n    console.log(\"matchRange: \" + matchRange);\n    var matchRange = [matches[i].index, matches[i].index + matches[i][0].length];\n    lastMatchEndIndex = matchRange[1];\n    var modifiedBlock = replaceStateModifier(matches[i], replaceStateInitialization); //console.log(\"Modified block: \" + modifiedBlock);\n    //console.log(\"Adding componentStringSection: \" + modifiedBlock);\n\n    componentStringSections.push(modifiedBlock);\n  } //console.log(\"Lastmatchendindex: \" + lastMatchEndIndex);\n  //console.log(\"Adding componentStringSection: \" + componentString.substring(lastMatchEndIndex));\n\n\n  componentStringSections.push(componentString.substring(lastMatchEndIndex));\n  componentString = componentStringSections;\n  return componentString;\n}","map":{"version":3,"sources":["/home/michael/git/javascriptClassToFunctionalConverter/src/Tools/classToFunctionalConverter.js"],"names":["replaceStateModifier","componentString","regexPatterns","classDeclarationRegex","constructorRegex","modifyStateRegex","setStateRegex","setStateVarRegex","useStateSetter","replacements","classDeclarationReplacement","constructorReplacement","initializeStateReplacement","initializeStateVariableReplacement","replaceStateInitialization","p1","p2","p3","p4","toUpperCase","replace","matches","match","lastMatchEndIndex","componentStringSections","i","length","push","substring","index","console","log","matchRange","modifiedBlock"],"mappings":"AAAA,OAAOA,oBAAP,MAAiC,2BAAjC;AAEA,eAAe,UAAUC,eAAV,EAA2B;AACxC;AACA,MAAMC,aAAa,GAAG;AACpBC,IAAAA,qBAAqB,EAAE,sDADH;AAEpB;AACAC,IAAAA,gBAAgB,EAAE,+EAHE;AAIpBC,IAAAA,gBAAgB,EAAE,6FAJE;AAKpBC,IAAAA,aAAa,EAAE,mEALK;AAMpBC,IAAAA,gBAAgB,EAAE,4BANE;AAOpBC,IAAAA,cAAc,EAAE;AAPI,GAAtB;AASA,MAAMC,YAAY,GAAG;AACnBC,IAAAA,2BAA2B,EAAE,wBADV;AAEnBC,IAAAA,sBAAsB,EAAE,IAFL;AAGnBC,IAAAA,0BAA0B,EAAE,IAHT;AAInBC,IAAAA,kCAAkC,EAAE;AAJjB,GAArB;;AAOA,MAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CAAUC,EAAV,EAAcC,EAAd,EAAkBC,EAAlB,EAAsBC,EAAtB,EAA0B;AAC3D,WACE,YACAF,EADA,GAEAC,EAFA,GAGA,OAHA,GAIAD,EAAE,CAACG,WAAH,EAJA,GAKAF,EALA,GAMA,eANA,GAOAC,EAPA,GAQA,KATF;AAWD,GAZD,CAlBwC,CAgCxC;;;AACAjB,EAAAA,eAAe,GAAGA,eAAe,CAACmB,OAAhB,CAChBlB,aAAa,CAACC,qBADE,EAEhBM,YAAY,CAACC,2BAFG,CAAlB,CAjCwC,CAqCxC;;AACAT,EAAAA,eAAe,GAAGA,eAAe,CAACmB,OAAhB,CAChBlB,aAAa,CAACE,gBADE,EAEhBK,YAAY,CAACE,sBAFG,CAAlB,CAtCwC,CA2CxC;;AACA,MAAIU,OAAO,GAAGpB,eAAe,CAACqB,KAAhB,CAAsBpB,aAAa,CAACG,gBAApC,CAAd,CA5CwC,CA6CxC;AACA;;AACA,MAAIkB,iBAAiB,GAAG,CAAxB;AACA,MAAIC,uBAAuB,GAAG,EAA9B;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,OAAO,CAACK,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC;AACAD,IAAAA,uBAAuB,CAACG,IAAxB,CACE1B,eAAe,CAAC2B,SAAhB,CAA0BL,iBAA1B,EAA6CF,OAAO,CAACI,CAAD,CAAP,CAAWI,KAAxD,CADF;AAGAC,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAiBC,UAA7B;AACA,QAAIA,UAAU,GAAG,CACfX,OAAO,CAACI,CAAD,CAAP,CAAWI,KADI,EAEfR,OAAO,CAACI,CAAD,CAAP,CAAWI,KAAX,GAAmBR,OAAO,CAACI,CAAD,CAAP,CAAW,CAAX,EAAcC,MAFlB,CAAjB;AAKAH,IAAAA,iBAAiB,GAAGS,UAAU,CAAC,CAAD,CAA9B;AAEA,QAAIC,aAAa,GAAGjC,oBAAoB,CACtCqB,OAAO,CAACI,CAAD,CAD+B,EAEtCX,0BAFsC,CAAxC,CAbuC,CAiBvC;AACA;;AACAU,IAAAA,uBAAuB,CAACG,IAAxB,CAA6BM,aAA7B;AACD,GArEuC,CAsExC;AACA;;;AACAT,EAAAA,uBAAuB,CAACG,IAAxB,CAA6B1B,eAAe,CAAC2B,SAAhB,CAA0BL,iBAA1B,CAA7B;AACAtB,EAAAA,eAAe,GAAGuB,uBAAlB;AACA,SAAOvB,eAAP;AACD","sourcesContent":["import replaceStateModifier from \"./replaceStateModifier.js\";\r\n\r\nexport default function (componentString) {\r\n  // REGEX PATTERNS\r\n  const regexPatterns = {\r\n    classDeclarationRegex: /class ((\\w*|\\d*)+) extends React.Component *{ *\\n/gim,\r\n    // blah? remove outer constructor definition block and fix contents indentation accordingly\r\n    constructorRegex: /( *constructor\\(props\\) *{ *\\n)(?: *super\\(props\\);? *\\n)(((?: {2}).*\\n)*)/gim,\r\n    modifyStateRegex: /(?: *((this.state ?= ?{)|(this.setState\\({)) *\\n)((( *)([a-z]\\w*): (\\w*),? *\\s*)*)}\\)?;?\\n/g,\r\n    setStateRegex: /(?: *this.setState ?\\(\\s*{ *\\n)(( *)([a-z]\\w*): (\\w*),? *\\s*)*};?/,\r\n    setStateVarRegex: /([a-z])(\\w*): ([^\\s,]*),?/g,\r\n    useStateSetter: /set([a-z])\\w*/g\r\n  };\r\n  const replacements = {\r\n    classDeclarationReplacement: \"function $1(props) {\\n\",\r\n    constructorReplacement: \"$2\",\r\n    initializeStateReplacement: \"$1\",\r\n    initializeStateVariableReplacement: \"const [$1, set$1] = useState($2);\"\r\n  };\r\n\r\n  const replaceStateInitialization = function (p1, p2, p3, p4) {\r\n    return (\r\n      \"const [\" +\r\n      p2 +\r\n      p3 +\r\n      \", set\" +\r\n      p2.toUpperCase() +\r\n      p3 +\r\n      \"] = useState(\" +\r\n      p4 +\r\n      \")\\n\"\r\n    );\r\n  };\r\n\r\n  //Replace class definition with function definition\r\n  componentString = componentString.replace(\r\n    regexPatterns.classDeclarationRegex,\r\n    replacements.classDeclarationReplacement\r\n  );\r\n  // Remove constructor declaration and its closing \"}\"\r\n  componentString = componentString.replace(\r\n    regexPatterns.constructorRegex,\r\n    replacements.constructorReplacement\r\n  );\r\n\r\n  // Store all instances of state modifying blocks in \"match\"\r\n  let matches = componentString.match(regexPatterns.modifyStateRegex);\r\n  // Obtain the substring of each state-modifying block and pass it\r\n  // To the replaceStateModifier function\r\n  let lastMatchEndIndex = 0;\r\n  let componentStringSections = [];\r\n  for (let i = 0; i < matches.length; i++) {\r\n    //console.log(\"Adding componentStringSection: \" + componentString.substring(lastMatchEndIndex, matches[i].index));\r\n    componentStringSections.push(\r\n      componentString.substring(lastMatchEndIndex, matches[i].index)\r\n    );\r\n    console.log(\"matchRange: \" + matchRange);\r\n    let matchRange = [\r\n      matches[i].index,\r\n      matches[i].index + matches[i][0].length\r\n    ];\r\n\r\n    lastMatchEndIndex = matchRange[1];\r\n\r\n    let modifiedBlock = replaceStateModifier(\r\n      matches[i],\r\n      replaceStateInitialization\r\n    );\r\n    //console.log(\"Modified block: \" + modifiedBlock);\r\n    //console.log(\"Adding componentStringSection: \" + modifiedBlock);\r\n    componentStringSections.push(modifiedBlock);\r\n  }\r\n  //console.log(\"Lastmatchendindex: \" + lastMatchEndIndex);\r\n  //console.log(\"Adding componentStringSection: \" + componentString.substring(lastMatchEndIndex));\r\n  componentStringSections.push(componentString.substring(lastMatchEndIndex));\r\n  componentString = componentStringSections;\r\n  return componentString;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}